/*This file is intended primarily for the functions that the program may or may not use. It it
* designed to allow for further extension (see what I did there) and as much code re-us as possible*/

/**
 * Checks for a location
 */
function checkForGPS(){
    var body = document.getElementById("body");
    if(!navigator.geolocation){
        var errMsg = "Your device does not support GPS location service or you have it turned off";
        body.innerHTML(errMsg);
    }
    navigator.geolocation.getCurrentPosition(printLocation);
}

/**
 * Prints out any position object generated by the JavaScript geolocation API. Primarily intended to
 * serve as a dummy call back function for navigator.geolocation.getCurrentPosition().
 * @param position
 */
function printLocation(position) {
   console.log(position.coords.latitude + "  " + position.coords.longitude +
   "\n " + position.coords);
}

/**
 * Returns the coordintes of a street address passed to it
 * @param address: street address of a specified location that is recognized on google maps
 * @returns returns the first location object in an array of results. This is often the location closest to the device
 */
function getLocation(address){
    var geo = new google.maps.Geocoder();
    geo.geocoder({'address': address}, function(results, status){
        if (status == google.maps.GeocoderStatus.OK) {
            return results[0].geometry.location;
        }
    })
}


/**
 * Accepts coordinates of a location and places it's marker on the map with name
 * @param LatLng: location coordinates in the form of Longitude and Latitude
 * @param name:  Name of the location marked down
 * @param mapVar: Initialized google maps object
 */
function setMarker(LatLng, name, mapVar){
    var marker = new google.maps.Marker({
        map: mapVar,
        position: LatLng,
        title: name
    });
}

/**
 * Takes a street address and places a marker on the specified map object
 * @param address
 * @param map
 */
function placeMarkers(address, mapVar){
    var geCode = new google.maps.Geocoder();

}



